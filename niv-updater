#!/usr/bin/env bash
# vim: set ft=bash

set -euo pipefail

error() { echo "::error::$*"; }
fatal() {
    error "$@"
    exit 1
}

# Install all the dependencies we need, using Nix
setupPrerequisites() {
    echo "Installing Nix"

    # Check if some other step already installed Nix
    if [[ ! -d /nix/store ]] || ! nix --version >/dev/null 2>&1; then
        sudo mkdir -p /etc/nix
        # Workaround segfault: https://github.com/NixOS/nix/issues/2733
        sudo sh -c 'echo "http2 = false" >> /etc/nix/nix.conf'

        sh <(curl -sSL https://nixos.org/nix/install) --no-daemon
    fi

    echo "Installing Nix - done"
    echo "Installing dependencies"

    export PATH="${PATH}:/nix/var/nix/profiles/per-user/runner/profile/bin:/nix/var/nix/profiles/default/bin"

    # shellcheck disable=SC1090
    source "${HOME}/.nix-profile/etc/profile.d/nix.sh"

    # we also need jq and git, but they both come with ubuntu-latest with GitHub Actions
    # https://github.com/actions/virtual-environments/blob/master/images/linux/Ubuntu1804-README.md
    nix-env -iA nixpkgs.gitAndTools.hub nixpkgs.jo
    nix-env -iA niv -f https://github.com/nmattia/niv/tarball/master \
        --substituters https://niv.cachix.org \
        --trusted-public-keys niv.cachix.org-1:X32PCg2e/zAm3/uD1ScqW2z/K0LtDyNV7RdaxIuLgQM=
    echo "Installing dependencies - done"
}

# Setup netrc file to be used by nix-prefetch-url
setupNetrc() {
    if [[ $INPUT_SKIP_SSH_REPOS == "false" ]]; then
        netrc=$(mktemp)
        sudo chmod 0600 "$netrc"
        sudo sh -c "echo 'netrc-file = $netrc' >> /etc/nix/nix.conf"
        cat <<EOF >>"$netrc"
machine github.com
login api
password $GITHUB_TOKEN
EOF
        # shellcheck disable=SC2064
        trap "rm -f '$netrc'" EXIT
    fi
}

# This function will modify all INPUT_* variables so that they don't contain any garbage
sanitizeInputs() {
    # remove all whitespace
    INPUT_WHITELIST="${INPUT_WHITELIST// /}"
    # remove all redundant commas, as well as those at the beginning and end
    shopt -s extglob
    INPUT_WHITELIST="${INPUT_WHITELIST//+(,)/,}"
    INPUT_WHITELIST="${INPUT_WHITELIST//^+(,)/}"
    INPUT_WHITELIST="${INPUT_WHITELIST//+(,)$/}"
    shopt -u extglob

    # prepare the blacklist
    # only need to remove spaces, commas are irrelevant
    INPUT_BLACKLIST="${INPUT_BLACKLIST// /}"

    # remove all empty lines from the labels
    # do not remove whitespace at the beginning and the end of the line, it might be legal
    shopt -s extglob
    INPUT_LABELS="${INPUT_LABELS##+(*([[:space:]])$'\n')}"
    INPUT_LABELS="${INPUT_LABELS%%+(*([[:space:]])$'\n')}"
    INPUT_LABELS="${INPUT_LABELS//+(*([[:space:]])$'\n')*([[:space:]])$'\n'/$'\n'}"
    shopt -s extglob
}

applyLabels() {
    if [[ -z $INPUT_LABELS ]]; then
        echo "No labels to add"
        return
    fi

    echo "Adding labels to the PR"

    local pr_data
    pr_data="$1"

    pr_number="$(jq -r ".number // empty" <"$pr_data")"
    if [[ -z $pr_number ]]; then
        echo "::warning::could not get the PR number from the json payload, skipping adding labels"
        return
    fi

    local labels
    mapfile -t labels < <(printf "%s" "$INPUT_LABELS")
    payload=$(jo labels="$(jo -a "${labels[@]}")")

    if ! printf "%s" "$payload" | hub api -XPOST --input - \
        "/repos/$GITHUB_REPOSITORY/issues/$pr_number/labels" >/dev/null; then
        echo "::warning::could not assign labels to the PR $pr_number"
    fi
}

createPullRequestsOnUpdate() {
    echo "Checking for updates"
    if [[ -z $INPUT_PULL_REQUEST_BASE ]]; then
        INPUT_PULL_REQUEST_BASE="$GITHUB_REF"
        base="$GITHUB_SHA"
    else
        # get the SHA of the current base, so that it remains fixed during the run
        base="$(hub api "/repos/$GITHUB_REPOSITORY/branches/$INPUT_PULL_REQUEST_BASE" | jq -r '.commit.sha')"
    fi

    echo "Will use branch '$INPUT_PULL_REQUEST_BASE' (ref: $base) as the base branch"

    merges_filter=""
    if [[ $INPUT_SHOW_MERGES == "false" ]]; then
        # a filter for jq, to be used in the query for getting the changelog
        merges_filter="| select((.parents | length) < 2)"
    fi

    SOURCES_JSON='nix/sources.json'

    echo "Getting $SOURCES_JSON from $GITHUB_REPOSITORY (ref: $base)"
    # get the content
    sj=$(mktemp)
    if ! hub api -XGET -F ref="$base" "/repos/$GITHUB_REPOSITORY/contents/$SOURCES_JSON" >>"$sj"; then
        error "could not fetch sources.json"
    fi
    echo "Getting $SOURCES_JSON from $GITHUB_REPOSITORY (ref: $base) - done"

    file_sha="$(jq -r '.sha' <"$sj")"
    content="$(jq -r '.content' <"$sj" | base64 -d)"

    if [[ -n $INPUT_WHITELIST ]]; then
        # Can't do <<< as it *appends* a newline :(
        mapfile -td , all_deps < <(printf "%s" "$INPUT_WHITELIST")
    else
        mapfile -t all_deps < <(jq -r 'keys[]' <<<"$content")
    fi

    echo "Going through all dependencies"
    for dep in "${all_deps[@]}"; do
        echo "Processing dependency '$dep'"

        if [[ ",$INPUT_BLACKLIST," == *",$dep,"* ]]; then
            echo "Dependency '$dep' is blacklisted, skipping."
            continue
        fi

        revision="$(jq -r ".\"$dep\".rev" <<<"$content")"

        # check if revision doesn't look like sha, and if skip_versioned_revisions is set, skip
        if [[ $INPUT_SKIP_VERSIONED_REVISIONS == "true" && ! ($revision =~ ^[a-f0-9A-F]{40}$ || $revision =~ ^[a-f0-9A-F]{7}) ]]; then
            echo "Revision '$revision' looks like a regular version string, and skip_versioned_revisions is set, skipping."
            continue
        fi

        # check if the branch exists first, and skip if it does
        branch_name="upgrade/$dep-$revision"

        if hub api "/repos/$GITHUB_REPOSITORY/branches/$branch_name" >/dev/null; then
            echo "branch '$branch_name' already exists, skipping."
            continue
        fi

        echo "Will use branch '$branch_name' for the possible update"

        # since this is an action, we don't have SSH keys available
        # but we do have tokens that are useful
        # check if the dependency is to github
        dep_owner="$(jq -r ".\"$dep\".owner // empty" <<<"$content")"
        dep_repo="$(jq -r ".\"$dep\".repo // empty" <<<"$content")"
        dep_url="$(jq -r ".\"$dep\".url // empty" <<<"$content" | { grep github.com || true; })"
        github_ssh="$(jq -r ".\"$dep\".repo // empty" <<<"$content" | { grep -F 'ssh://git@github.com' || true; })"
        [[ -n $dep_url || -n $github_ssh ]] && is_github="yes" || is_github=""

        # skip if github_ssh and skip_ssh_repos is in effect
        if [[ -n $github_ssh && $INPUT_SKIP_SSH_REPOS == "true" ]]; then
            echo "Hosted by a repository accessible over SSH, and skip_ssh_repos is set, skipping."
            continue
        fi

        # try extracting the owner and the repo
        if [[ -n $github_ssh ]]; then
            owner_repo="${github_ssh#ssh://git@github.com/}"
            dep_owner="${owner_repo%/*}"
            dep_repo="${owner_repo#*/}"
        fi

        # check if there is an update by running niv
        wdir=$(mktemp -d)
        mkdir -p "$wdir/nix"
        echo "$content" >"$wdir/$SOURCES_JSON.orig"
        echo "$content" >"$wdir/$SOURCES_JSON"
        (
            cd "$wdir"

            # rewrite the entry so that we can use token instead of SSH
            if [[ -n $github_ssh ]]; then
                echo "As this is a dependency fetched with SSH, trying to switch to https type"
                niv_branch="$(jq -r ".\"$dep\".ref // empty" <"$wdir/$SOURCES_JSON")"
                niv drop "$dep"
                niv add "$dep_owner/$dep_repo" -a rev="$revision" -a branch="$niv_branch"
                rm "$SOURCES_JSON.orig"
                cp "$SOURCES_JSON" "$SOURCES_JSON.orig"
            fi

            # TODO: make sure niv can update from tag to tag, instead of always using shas
            if ! niv update "$dep"; then
                echo "::warning:: Cannot update '$dep', skipping it"
                touch .skip
            fi
        )
        # the only way to continue when using subshells
        if [[ -e "$wdir/.skip" ]]; then
            rm -rf "$wdir"
            continue
        fi

        if diff -q "$wdir/$SOURCES_JSON.orig" "$wdir/$SOURCES_JSON" &>/dev/null; then
            echo "There is no update for '$dep', skipping."
            continue
        fi

        new_revision="$(jq -r ".\"$dep\".rev" <"$wdir/$SOURCES_JSON")"

        if [[ $revision == "$new_revision" ]]; then
            echo "The new version ($new_revision) is the same as old ($revision) for $dep, skipping"
            continue
        fi

        # since in the previous step we possibly changed from ssh to https, revert back
        (
            cd "$wdir"

            # rewrite the entry so that we can use token instead of SSH
            if [[ -n $github_ssh ]]; then
                echo "Reverting the dependency back to SSH"
                echo "$content" >"$wdir/$SOURCES_JSON"
                niv modify "$dep" -a rev="$new_revision"
            fi
        )

        # generate the message
        title=$(mktemp)
        message=$(mktemp)

        printf "Will generate the Pull Request message for '$dep', update from %.8s to %.8s\n" "$revision" "$new_revision"

        printf "niv %s: update %.8s -> %.8s" "$dep" "$revision" "$new_revision" >>"$title"
        # get a short changelog if we're on github
        if [[ -z $is_github ]]; then
            # pretty sure this is not github
            echo "Dependency '$dep' isn't hosted on github.com, cannot fetch the changelog" >>"$message"
        else
            echo "Dependency '$dep' is hosted on github.com"

            {
                printf "## Changelog for %s:\n" "$dep"
                printf "Commits: [$dep_owner/$dep_repo@%.8s...%.8s](https://github.com/$dep_owner/$dep_repo/compare/${revision}...${new_revision})\n\n" "$revision" "$new_revision"
                { hub api "/repos/$dep_owner/$dep_repo/compare/${revision}...${new_revision}" || true; } | jq -r '.commits[] '"$merges_filter"' | "* [\(.sha[0:8])](\(.html_url)) \(.commit.message | split("\n") | first)"' | sed "s~\(#[0-9]\+\)~$dep_owner/$dep_repo\1~g"
            } >>"$message"
        fi

        # create the branch
        echo "Creating branch '$branch_name' for the update of '$dep'"
        if ! hub api \
            -F ref="refs/heads/$branch_name" \
            -F sha="$base" \
            "/repos/$GITHUB_REPOSITORY/git/refs" >/dev/null; then
            error "could not create branch $branch_name"
        fi

        # upload the content
        echo "Uploading the new $SOURCES_JSON"
        new_content=$(mktemp)
        base64 "$wdir/$SOURCES_JSON" >>"$new_content"
        if ! hub api -XPUT \
            -F message=@"$message" \
            -F content=@"$new_content" \
            -F sha="$file_sha" \
            -F branch="$branch_name" \
            "/repos/$GITHUB_REPOSITORY/contents/$SOURCES_JSON" >/dev/null; then
            # try to delete the branch
            hub api -XDELETE "/repos/$GITHUB_REPOSITORY/git/refs/heads/$branch_name" >/dev/null || true
            error "could not upload content to $branch_name"
        fi

        # create a PR, use API to avoid the need for a local checkout
        echo "Creating a PR for updating '$dep', branch name is '$branch_name'"
        pr_data=$(mktemp)
        if ! hub api -XPOST \
            -F head="$branch_name" \
            -F base="$INPUT_PULL_REQUEST_BASE" \
            -F title=@"$title" \
            -F body=@"$message" \
            "/repos/$GITHUB_REPOSITORY/pulls" >>"$pr_data"; then
            # try to delete the branch
            hub api -XDELETE "/repos/$GITHUB_REPOSITORY/git/refs/heads/$branch_name" >/dev/null || true
            error "could not create a PR"
        fi

        applyLabels "$pr_data"

        # cleanup
        rm -rf "$wdir"
        rm -f "$pr_data"
        rm -f "$new_content"
        rm -f "$message"
        rm -f "$title"

        echo "Processing dependency '$dep' - done"
    done
    rm -f "$sj"
    echo "Checking for updates - done"
}

setupPrerequisites
setupNetrc
sanitizeInputs
createPullRequestsOnUpdate
